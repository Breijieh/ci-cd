name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: payroll-app
  AWS_ACCOUNT_ID: 260781727963

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests and Code Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build application
      run: mvn clean package -DskipTests

  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Push Docker Image
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "âœ… Image pushed successfully!"
        echo "ðŸš€ Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-demo:
    runs-on: ubuntu-latest
    needs: build
    name: Deployment Demo
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deployment simulation and validation
      run: |
        echo "ðŸš€ Starting deployment process..."
        
        # Verify image exists in ECR
        aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=latest --region $AWS_REGION
        
        echo "âœ… Container image verified in ECR"
        echo "âœ… Image URI: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest"
        
        # Deployment simulation
        echo "ðŸ”„ Simulating ECS deployment..."
        echo "âœ… Health checks passed"
        echo "âœ… Zero-downtime deployment completed"
        echo "ðŸŽ¯ Application ready for production deployment!"
        
        # Success notification
        echo "ðŸ“Š Deployment Summary:"
        echo "   â”œâ”€â”€ Build ID: ${{ github.sha }}"
        echo "   â”œâ”€â”€ Registry: Amazon ECR"
        echo "   â”œâ”€â”€ Region: $AWS_REGION"
        echo "   â”œâ”€â”€ Account: $AWS_ACCOUNT_ID"
        echo "   â””â”€â”€ Status: âœ… Success"
