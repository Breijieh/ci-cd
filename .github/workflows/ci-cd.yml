deploy:
  runs-on: ubuntu-latest
  needs: build
  name: 🚀 Deploy to Production with Database
  if: github.ref == 'refs/heads/main'
  
  steps:
  - name: 🔐 Configure AWS Credentials
    uses: aws-actions/configure-aws-credentials@v4
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      aws-region: us-east-1
      
  - name: 🚀 Deploy with Production Database
    run: |
      # Stop current task for rolling update
      CURRENT_TASK=$(aws ecs list-tasks --cluster payroll-app-cluster --query 'taskArns[0]' --output text)
      if [ "$CURRENT_TASK" != "None" ] && [ "$CURRENT_TASK" != "" ]; then
        aws ecs stop-task --cluster payroll-app-cluster --task $CURRENT_TASK --reason "Rolling update with database"
        aws ecs wait tasks-stopped --cluster payroll-app-cluster --tasks $CURRENT_TASK
      fi
      
      # Create production task definition with database
      cat > prod-task-def.json << 'EOF'
      {
        "family": "payroll-app-task",
        "networkMode": "awsvpc",
        "requiresCompatibilities": ["FARGATE"],
        "cpu": "256",
        "memory": "512",
        "executionRoleArn": "arn:aws:iam::260781727963:role/LabRole",
        "taskRoleArn": "arn:aws:iam::260781727963:role/LabRole",
        "containerDefinitions": [
          {
            "name": "payroll-app",
            "image": "${{ needs.build.outputs.image }}",
            "portMappings": [{"containerPort": 8080, "protocol": "tcp"}],
            "environment": [
              {"name": "SPRING_PROFILES_ACTIVE", "value": "prod"},
              {"name": "DB_HOST", "value": "payroll-prod-db.cluug9r0tmdt.us-east-1.rds.amazonaws.com"},
              {"name": "DB_NAME", "value": "payroll_prod"},
              {"name": "DB_USERNAME", "value": "payroll_user"},
              {"name": "DB_PASSWORD", "value": "SecurePassword123!"},
              {"name": "JWT_SECRET", "value": "production-super-secure-jwt-secret-key-12345"},
              {"name": "MAIL_HOST", "value": "smtp.gmail.com"},
              {"name": "MAIL_PORT", "value": "587"},
              {"name": "MAIL_USERNAME", "value": "rawang17@gmail.com"},
              {"name": "MAIL_PASSWORD", "value": "fswc bscf gnyb iewm"}
            ],
            "logConfiguration": {
              "logDriver": "awslogs",
              "options": {
                "awslogs-group": "/ecs/payroll-app",
                "awslogs-region": "us-east-1",
                "awslogs-stream-prefix": "ecs"
              }
            }
          }
        ]
      }
      EOF
      
      # Register new task definition
      NEW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://prod-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
      
      # Get network configuration
      VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text)
      SUBNET_IDS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC_ID Name=map-public-ip-on-launch,Values=true --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
      SG_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values=payroll-sg --query 'SecurityGroups[0].GroupId' --output text)
      
      # Run new task with database configuration
      NEW_TASK=$(aws ecs run-task \
        --cluster payroll-app-cluster \
        --task-definition $NEW_TASK_ARN \
        --launch-type FARGATE \
        --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
        --query 'tasks[0].taskArn' --output text)
        
      # Wait for task to be running
      aws ecs wait tasks-running --cluster payroll-app-cluster --tasks $NEW_TASK
      echo "✅ Production deployment with database completed!"
      
  - name: 🌐 Get Production Endpoints
    run: |
      # Get new public IP
      TASK_ARN=$(aws ecs list-tasks --cluster payroll-app-cluster --query 'taskArns[0]' --output text)
      ENI_ID=$(aws ecs describe-tasks --cluster payroll-app-cluster --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
      PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
      
      echo ""
      echo "🎉 ========================================"
      echo "🎉 PRODUCTION WITH DATABASE DEPLOYED!"
      echo "🎉 ========================================"
      echo ""
      echo "🌐 Your Production Application:"
      echo "   Health: http://$PUBLIC_IP:8080/actuator/health"
      echo "   API: http://$PUBLIC_IP:8080/employees"
      echo "   Login: http://$PUBLIC_IP:8080/auth/login"
      echo ""
      echo "🗄️ Database: AWS RDS PostgreSQL"
      echo "📊 Profile: production"
      echo "🔒 Security: JWT (30min), Swagger disabled"
      echo ""
      echo "✨ Your app now uses a real database!"
