name: Complete CI/CD Pipeline with Auto-Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: payroll-app
  ECS_CLUSTER: payroll-app-cluster
  ECS_TASK_DEFINITION: payroll-app-task
  CONTAINER_NAME: payroll-app

jobs:
  # ========================================
  # STAGE 1: BUILD & TEST
  # ========================================
  test:
    runs-on: ubuntu-latest
    name: 🧪 Run Tests & Code Analysis
    
    steps:
    - name: 📥 Checkout Source Code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: 📦 Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🔍 Run Unit Tests
      run: |
        echo "🧪 Running unit tests..."
        mvn clean test -B
        
    - name: 📊 Generate Test Reports
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 📋 Maven Test Results
        path: target/surefire-reports/*.xml
        reporter: java-junit
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏗️ Build Application
      run: |
        echo "🏗️ Building application..."
        mvn clean package -DskipTests -B

  # ========================================
  # STAGE 2: DOCKER BUILD & PUSH TO ECR
  # ========================================
  build:
    runs-on: ubuntu-latest
    needs: test
    name: 🐳 Build & Push Docker Image
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    
    steps:
    - name: 📥 Checkout Source Code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: 📦 Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🏗️ Build Application
      run: mvn clean package -DskipTests -B
      
    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🔑 Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: 🐳 Build, Tag & Push Docker Image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🐳 Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        echo "📤 Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "✅ Image pushed successfully!"
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # ========================================
  # STAGE 3: DEPLOY TO AWS ECS AUTOMATICALLY
  # ========================================
  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: 🚀 Auto-Deploy to AWS ECS
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🔄 Update ECS Task with New Image
      run: |
        echo "🔄 Updating ECS task with new image..."
        
        # Stop current running task (rolling update)
        CURRENT_TASK=$(aws ecs list-tasks --cluster $ECS_CLUSTER --query 'taskArns[0]' --output text)
        
        if [ "$CURRENT_TASK" != "None" ] && [ "$CURRENT_TASK" != "" ]; then
          echo "🛑 Stopping current task for rolling update..."
          aws ecs stop-task --cluster $ECS_CLUSTER --task $CURRENT_TASK --reason "Rolling update with new image"
          
          # Wait for task to stop
          echo "⏳ Waiting for current task to stop..."
          aws ecs wait tasks-stopped --cluster $ECS_CLUSTER --tasks $CURRENT_TASK
        fi
        
    - name: 🚀 Launch New Task with Updated Image
      run: |
        echo "🚀 Launching new task with updated image..."
        
        # Get network configuration from environment
        VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text)
        SUBNET_IDS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC_ID Name=map-public-ip-on-launch,Values=true --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
        
        # Find existing security group
        SG_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values=payroll-sg --query 'SecurityGroups[0].GroupId' --output text)
        
        echo "Using VPC: $VPC_ID"
        echo "Using Subnets: $SUBNET_IDS"
        echo "Using Security Group: $SG_ID"
        
        # Update task definition with new image
        NEW_TASK_DEF=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query 'taskDefinition')
        
        # Create updated task definition with new image
        echo $NEW_TASK_DEF | jq --arg IMAGE "${{ needs.build.outputs.image }}" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' > new-task-def.json
        
        # Register new task definition
        NEW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "New task definition: $NEW_TASK_ARN"
        
        # Run new task
        NEW_TASK=$(aws ecs run-task \
          --cluster $ECS_CLUSTER \
          --task-definition $NEW_TASK_ARN \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
          --query 'tasks[0].taskArn' --output text)
          
        echo "New task started: $NEW_TASK"
        
        # Wait for task to be running
        echo "⏳ Waiting for new task to start..."
        aws ecs wait tasks-running --cluster $ECS_CLUSTER --tasks $NEW_TASK
        
        echo "✅ New task is running!"
        
    - name: 🌐 Get Updated Endpoint Information
      run: |
        echo "🌐 Getting updated endpoint information..."
        
        # Get the new task
        TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --query 'taskArns[0]' --output text)
        
        # Get network interface
        ENI_ID=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
        
        # Get public IP
        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        
        echo ""
        echo "🎉 ========================================"
        echo "🎉 AUTOMATED DEPLOYMENT COMPLETED!"
        echo "🎉 ========================================"
        echo ""
        echo "🌐 Your UPDATED application is live at:"
        echo "   Health Check:    http://$PUBLIC_IP:8080/actuator/health"
        echo "   API Docs:        http://$PUBLIC_IP:8080/swagger-ui.html"
        echo "   Employees API:   http://$PUBLIC_IP:8080/employees"
        echo "   Authentication:  http://$PUBLIC_IP:8080/auth/login"
        echo ""
        echo "🔄 Deployment Details:"
        echo "   • Repository: ${{ github.repository }}"
        echo "   • Commit: ${{ github.sha }}"
        echo "   • Author: ${{ github.actor }}"
        echo "   • Image: ${{ needs.build.outputs.image }}"
        echo "   • Task: $TASK_ARN"
        echo ""
        echo "✨ MAGIC: Every push to main will now automatically update your live application!"
        echo ""
        echo "🧪 Quick test:"
        echo "   curl http://$PUBLIC_IP:8080/actuator/health"
        
        # Health check
        echo ""
        echo "🔍 Performing health check..."
        sleep 10  # Give app time to fully start
        
        if curl -f -s http://$PUBLIC_IP:8080/actuator/health > /dev/null; then
          echo "✅ Health check PASSED - Application is healthy!"
        else
          echo "⚠️ Health check pending - Application may still be starting..."
        fi

  # ========================================
  # STAGE 4: VALIDATION & NOTIFICATION
  # ========================================
  validate:
    runs-on: ubuntu-latest
    needs: deploy
    name: ✅ Validate & Notify
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📧 Success Notification
      run: |
        echo ""
        echo "🎊 ====================================="
        echo "🎊 FULL CI/CD PIPELINE SUCCESSFUL!"
        echo "🎊 ====================================="
        echo ""
        echo "🔄 What just happened automatically:"
        echo "   1. ✅ Code pushed to GitHub"
        echo "   2. ✅ Tests ran and passed"
        echo "   3. ✅ Docker image built"
        echo "   4. ✅ Image pushed to ECR"
        echo "   5. ✅ ECS task updated"
        echo "   6. ✅ Live endpoints updated!"
        echo ""
        echo "🎯 TRUE CI/CD ACHIEVED!"
        echo "   • Zero manual intervention"
        echo "   • Automated testing"
        echo "   • Rolling deployments"
        echo "   • Live endpoint updates"
        echo ""
        echo "🚀 Next time you push code:"
        echo "   → This entire process repeats automatically"
        echo "   → Your live application updates instantly"
        echo "   → Professional enterprise CI/CD!"
        echo ""
        echo "🏆 Project completed successfully!"
