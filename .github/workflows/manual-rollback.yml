name: Manual Rollback

on:
  workflow_dispatch:
    inputs:
      task_definition_choice:
        description: 'Which version to rollback to (1=current, 2=previous, etc.)'
        required: true
        default: '2'
        type: choice
        options:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'

jobs:
  rollback:
    runs-on: ubuntu-latest
    name: üîÑ Manual Rollback
    
    steps:
    - name: üîê Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: üîÑ Execute Rollback
      run: |
        echo "üîÑ Starting rollback to version ${{ github.event.inputs.task_definition_choice }}..."
        
        # Get task definitions
        TASK_DEFS=($(aws ecs list-task-definitions --family-prefix payroll-app-task --sort DESC --query 'taskDefinitionArns[0:5]' --output text))
        CHOICE=${{ github.event.inputs.task_definition_choice }}
        ROLLBACK_TASK_DEF="${TASK_DEFS[$((CHOICE-1))]}"
        
        echo "‚úÖ Selected: $ROLLBACK_TASK_DEF"
        
        # Stop current task
        CURRENT_TASK=$(aws ecs list-tasks --cluster payroll-app-cluster --query 'taskArns[0]' --output text)
        aws ecs stop-task --cluster payroll-app-cluster --task $CURRENT_TASK --reason "Manual GitHub rollback"
        aws ecs wait tasks-stopped --cluster payroll-app-cluster --tasks $CURRENT_TASK
        
        # Deploy previous version
        VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text)
        SUBNET_IDS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC_ID Name=map-public-ip-on-launch,Values=true --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
        SG_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values=payroll-sg --query 'SecurityGroups[0].GroupId' --output text)
        
        NEW_TASK=$(aws ecs run-task \
          --cluster payroll-app-cluster \
          --task-definition $ROLLBACK_TASK_DEF \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
          --query 'tasks[0].taskArn' --output text)
        
        aws ecs wait tasks-running --cluster payroll-app-cluster --tasks $NEW_TASK
        
        # Get new IP
        ENI_ID=$(aws ecs describe-tasks --cluster payroll-app-cluster --tasks $NEW_TASK --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
        NEW_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        
        echo "üéâ Rollback complete! Application: http://$NEW_IP:8080"
